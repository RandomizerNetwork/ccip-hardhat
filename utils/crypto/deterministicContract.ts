import { ethers } from "ethers-v5"

const factoryAddress = "0x28a70cD40b706f2EE2F959ab8d83Bf86BcF57716"; // Your deployed factory contract address
const leadingZeroes = 3; // Number of leading zeroes desired in the address
const bytecode =
  ""; // Your bytecode
const msgSender = "0xCf7be84148Db4Ff426f57e229bAc513ba656894c";

export const encoder = (types: any, values: any) => {
    const abiCoder = ethers.utils.defaultAbiCoder;
    const encodedParams = abiCoder.encode(types, values);
    return encodedParams.slice(2);
};

export const create2Address = (factoryAddress: any, saltHex: any, initCode: any) => {
    const create2Addr = ethers.utils.getCreate2Address(factoryAddress, saltHex, ethers.utils.keccak256(initCode));
    return create2Addr;
}

export const sleep = (ms: number) => new Promise((r) => setTimeout(r, ms));

export const createDeterministicContractV2 = async (_factoryAddress: string, _bytecode: string, _msgSender: string, _zeroesThreshold:number, _preferLeadingZeroes = true): Promise<string> => {
    console.time("DeterministicContractCreation");
    let bestSalt = '';
    let bestZeroesCount = 0;
    let i = 0;

    while (true) {
        // Generate 12 random bytes to complete 32 bytes when combined with the sender's address
        const saltBytes = ethers.utils.randomBytes(12);
        const msgSenderBytes = ethers.utils.arrayify(_msgSender);
        const fullSaltBytes = ethers.utils.concat([msgSenderBytes, saltBytes]);
        const fullSaltHex = ethers.utils.hexlify(fullSaltBytes);

        // Ensuring the salt is exactly 32 bytes long
        if (fullSaltBytes.length !== 32) {
            throw new Error("Salt must be exactly 32 bytes");
        }

        const initCodeHash = ethers.utils.keccak256(_bytecode);
        const addr = ethers.utils.getCreate2Address(_factoryAddress, fullSaltHex, initCodeHash);

        let zeroesCount = (addr.match(/0/g) || []).length;

        if (_preferLeadingZeroes) {
            const leadingZeroesMatch = addr.slice(2).match(/^0*/);
            const leadingZeroesCount = leadingZeroesMatch ? leadingZeroesMatch[0].length : 0;
            if (leadingZeroesCount > bestZeroesCount) {
                bestSalt = fullSaltHex;
                bestZeroesCount = leadingZeroesCount;
            }
        } else if (zeroesCount > bestZeroesCount) {
            bestSalt = fullSaltHex;
            bestZeroesCount = zeroesCount;
        }

        if (bestZeroesCount >= _zeroesThreshold) {
            console.log(`Address with ${bestZeroesCount} zeroes (including leading) found: ${addr}`);
            console.log(`Salt: ${bestSalt}`);
            console.timeEnd("DeterministicContractCreation");
            return bestSalt;
        }

        i++;
        if (i % 1000 === 0) console.log(`Attempts: ${i}`);
    }
};

const createDeterministicContract = async (_factoryAddress: string, _bytecode: string, _msgSender: string, _leadingZeros: number): Promise<string> => {
    console.time();
    let salt;
    let i = 0;
    while (!salt) {
      const saltBytes = ethers.utils.randomBytes(12);
      const msgSenderBytes = ethers.utils.arrayify(_msgSender);
      const fullSaltBytes = ethers.utils.concat([msgSenderBytes, saltBytes]);
      const saltHex = saltBytes.toString();
      const bytecodeBytes = ethers.utils.arrayify(_bytecode);
      const initCodeHash = ethers.utils.keccak256(bytecodeBytes);
      const addr = ethers.utils.getCreate2Address(
        _factoryAddress,
        fullSaltBytes,
        initCodeHash
      );
      console.log("adddr", addr, i);
      if (addr.slice(2, 2 + _leadingZeros) === "0".repeat(_leadingZeros)) {
        salt = ethers.utils.hexlify(fullSaltBytes);
        console.log(`Salt: ${salt}, ${saltBytes}, ${saltHex} Address: ${addr}`);
        console.timeEnd();
        return salt;
        // break;
      }
      i++;
    }
  
    process.removeAllListeners();
    return salt
  };
  
export default createDeterministicContract;